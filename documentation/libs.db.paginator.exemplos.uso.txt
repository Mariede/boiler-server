LIB db.js + paginator.js
------------------------

Conexão e execução de queries no MS SQL Server através do pacote NODE mssql

=> exemplos de parâmetros JSON de entrada para queries:

---------------------------------------------------------------------------------------------------------
// Estrutura básica queries (parâmetros de entrada)

query = {
	formato: 1, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['ID', 'int', 1],
			['NOME', 'varchar(200)', '%Nome Exemplo 1%']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: `
			SELECT * FROM TABELA T (NOLOCK) WHERE T.ID_TABELA=@ID OR T.NOME LIKE(@NOME);
			SET @QTD_RET = SCOPE_IDENTITY();
		`
	}
}

query = {
	formato: 2, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['ID', 'int', 1],
			['NOME', 'varchar(200)', 'Nome Exemplo 2']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
}

** input pode utilizar também um formato de chamada com apenas dois parâmetros de entrada, omitindo o tipo de dado **
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Parâmetros de entrada (exemplos)

let query1 = {
	formato: 1,
	dados: {
		input: [
			['NOME', 'varchar(200)', 'Joaquim Santos'],
			['SENHA', 'varchar(20)', 'SENH@TESTE123'],
			['ATIVO', 'bit', 1],
			['NOMECHECK', '%Joa%']
		],
		output: [
			['INSERTED_ID', 'int']
		],
		executar: `
			SET NOCOUNT OFF;
			DECLARE
				@INCR int; -- variavel interna
			SET
				@INCR = (
					SELECT TOP 1
						ID_USUARIO
					FROM
						USUARIO U (NOLOCK)
					WHERE
						U.NOME LIKE(@NOMECHECK) -- variavel input externa
					ORDER BY
						ID_USUARIO DESC
			);
			INSERT INTO USUARIO (
				NOME
				,SENHA
				,ATIVO
			) VALUES (
				@NOME + ' ' + CAST(@INCR AS varchar) -- variavel input externa + interna
				,@SENHA -- variavel input externa
				,@ATIVO -- variavel input externa
			);
			SET
				@INSERTED_ID = SCOPE_IDENTITY(); -- variavel output
			SELECT TOP 2
				NOME
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@NOMECHECK) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
			SELECT TOP 3
				*
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@NOMECHECK) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
		`
	}
},
query2 = {
	formato: 2,
	dados: {
		input: [
			['ID_USUARIO', 'int', 1],
			['NOME', 'varchar(200)', 'joa']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
};
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamadas nos métodos (exemplos)

// Execute (promise + async await)
dbCon.sqlOpenCon()
.then(
	async transaction => {
		try {
			let result1 = await dbCon.sqlExecute(transaction, query1); // Executa query ou queries
			await dbCon.sqlCloseCon(transaction);

			resolve(result1);
		} catch(err) {
			reject(err);
		}
	}
)
.catch(
	err => {
		reject(err);
	}
);


// Execute (async await)
try {
	let transaction = await dbCon.sqlOpenCon(),
		result1 = await dbCon.sqlExecute(transaction, query1); // Executa query ou queries
	await dbCon.sqlCloseCon(transaction);

	return result1;
} catch(err) {
	throw new Error(err);
}


// ou com o método agrupador ExecuteAll (async await)
try {
	// Executa query ou queries
	let result1 = await dbCon.sqlExecuteAll(query1);

	return result1;
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamada com paginação
const paginator = require('@serverRoot/helpers/paginator');

try {
	// Executa query ou queries
	let result1 = await dbCon.sqlExecuteAll(query1);
	// Paginador (page): pagina 3 / 9 itens por pagina, retorno => pageDetails, itemsList, rowsAffected
	result1.recordsets[0] = await paginator.setPage(result1.recordsets[0], result1.rowsAffected[0], 3, 9);

	return result1;
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamada com paginação e ordenação
const paginator = require('@serverRoot/helpers/paginator');

try {
	// Executa query ou queries
	let result1 = await dbCon.sqlExecuteAll(query1);
	// Ordenador (sort): sortElements deve ser uma array e case sensitive, sortOrder Array opcional ASC/DESC (default: ASC)
	result1.recordsets[0] = await paginator.setSort(result1.recordsets[0], ['SORTER2', 'SORTER1'], ['DESC', 'ASC']);
	// Paginador (page): pagina 3 / 9 itens por pagina, retorno => pageDetails, itemsList, rowsAffected
	result1.recordsets[0] = await paginator.setPage(result1.recordsets[0], result1.rowsAffected[0], 3, 9);

	return result1;
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamada com paginação, ordenação e conversão para camelcase do json do banco de dados
const paginator = require('@serverRoot/helpers/paginator');

try {
	// Executa query ou queries
	let result1 = await dbCon.sqlExecuteAll(query1);
	// Ordenador (sort): sortElements deve ser uma array e case sensitive, sortOrder Array opcional ASC/DESC (default: ASC)
	result1.recordsets[0] = await paginator.setSort(result1.recordsets[0], ['SORTER2', 'SORTER1'], ['DESC', 'ASC']);
	// Camel Case: renomeia chaves no objeto JSON para o padrao Camel Case
	result1.recordsets[0] = await paginator.keysToCamelCase(result1.recordsets[0]);
	// Paginador (page): pagina 3 / 9 itens por pagina, retorno => pageDetails, itemsList, rowsAffected
	result1.recordsets[0] = await paginator.setPage(result1.recordsets[0], result1.rowsAffected[0], 3, 9);

	return result1;
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------
