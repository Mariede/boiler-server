LIB db.js (SQL Server) + paginator.js + searcher.js
===================================================

Conexão e execução de queries no MS SQL Server através do pacote NODE mssql


// ---------------------------------------------------------------------------------------------------------
Recordsets - padrão de retorno ao front-end:

1) Não paginado (Lib MSSQL / Searcher):

- Apenas um recordset de retorno (direto ou com paginator.setResult):
{
	"recordset": [],
	"rowsAffected": 0,
	"output": {}, // Se existir
	"returnValue": 0 // Se existir
}

- Mais de um recordset de retorno (direto):
{
	"recordsets": [
		[],
		[]
	],
	"rowsAffected": [
		0,
		0
	],
	"output": {}, // Se existir
	"returnValue": 0 // Se existir
}

2) Paginado (com paginator.setPage):
{
	"pageDetails": {
		"currentPage": 1,
		"itemsPerPage": 10,
		"itemsFrom": 0,
		"itemsTo": 0,
		"itemsCount": 0,
		"totalPages": 0
	},
	"recordset": [],
	"rowsAffected": 0,
	"output": {}, // Se existir
	"returnValue": 0 // Se existir
}
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Estrutura básica queries (parâmetros de entrada)

query = {
	formato: 1, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['id', 'int', 1],
			['nome', 'varchar(200)', '%Nome Exemplo 1%']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: `
			SELECT * FROM TABELA T (NOLOCK) WHERE T.ID_TABELA=@id OR T.NOME LIKE(@nome);
			SET @QTD_RET = SCOPE_IDENTITY();
		`
	}
}

query = {
	formato: 2, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['id', 'int', 1],
			['nome', 'varchar(200)', 'Nome Exemplo 2']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
}

/* * input pode utilizar também um formato de chamada com apenas dois parâmetros de entrada, omitindo o tipo do dado * */

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Parâmetros de entrada (exemplos)

const query = {
	formato: 1,
	dados: {
		input: [
			['nome', 'varchar(200)', 'Joaquim Santos'],
			['senha', 'varchar(20)', 'SENH@TESTE123'],
			['relatorio', 'varchar(max)', 'teste inicial'],
			['ativo', 'bit', 1],
			['nomeCheck', '%Jo%']
		],
		output: [
			['INSERTED_ID', 'int']
		],
		executar: `
			SET NOCOUNT OFF;
			DECLARE
				@INCR int; -- variavel interna
			SET
				@INCR = (
					SELECT TOP 1
						ID_USUARIO
					FROM
						USUARIO U (NOLOCK)
					WHERE
						U.NOME LIKE(@nomeCheck) -- variavel input externa
					ORDER BY
						ID_USUARIO DESC
				);
			INSERT INTO USUARIO (
				NOME
				,SENHA
				,RELATORIO
				,ATIVO
			) VALUES (
				@nome + ' ' + CAST(@INCR AS varchar) -- variavel input externa + interna
				,@senha -- variavel input externa
				,@relatorio -- variavel input externa
				,@ativo -- variavel input externa
			);
			SET
				@INSERTED_ID = SCOPE_IDENTITY(); -- variavel output
			SELECT TOP 2
				NOME
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@nomeCheck) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
			SELECT TOP 3
				*
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@nomeCheck) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
		`
	}
};
const otherQuery = {
	formato: 2,
	dados: {
		input: [
			['idUsuario', 'int', 1],
			['nome', 'varchar(200)', 'jo']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
};
const anotherQuery = {
	formato: 1,
	dados: {
		input: [
			['nome', '%jo%']
		],
		executar: 'SELECT ID_USUARIO, NOME, SENHA, ATIVO FROM USUARIO (NOLOCK) WHERE NOME LIKE(@nome);'
	}
};
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamadas nos métodos especificando a transação
const dbCon = require('@serverRoot/helpers/db');

const query = {
	formato: 1,
	dados: {
		input: [
			['nome', '%jo%']
		],
		executar: 'SELECT ID_USUARIO, NOME, SENHA, ATIVO FROM USUARIO (NOLOCK) WHERE NOME LIKE(@nome);'
	}
};

const transaction = await dbCon.msSqlServer.sqlOpenCon();
const resultSet = await dbCon.msSqlServer.sqlExecute(transaction, query); // Executa query ou queries

await dbCon.msSqlServer.sqlCloseCon(transaction);

return resultSet;
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// ou com o método agrupador ExecuteAll (transação toda ocorre dentro de dados.executar)
const dbCon = require('@serverRoot/helpers/db');

const query = {
	formato: 1,
	dados: {
		input: [
			['nome', '%jo%']
		],
		executar: 'SELECT ID_USUARIO, NOME, SENHA, ATIVO FROM USUARIO (NOLOCK) WHERE NOME LIKE(@nome);'
	}
};

// Executa query ou queries
const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);

return resultSet;
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com setResult - SEM PAGINAÇÃO (util apenas quando resultSet de retorno vem com recordsets ao inves de recordset)
const dbCon = require('@serverRoot/helpers/db');
const paginator = require('@serverRoot/helpers/paginator');

const query = {
	formato: 2,
	dados: {
		input: [
			['id_Usuario', 'int', 1],
			['nome', 'varchar(200)', 'jo']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
};

const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);
const noPagedResult = paginator.setResult(resultSet, resultSet.recordsets[0], resultSet.rowsAffected[0], true); // Recordset selecionado

return noPagedResult;
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com setPage - PAGINAÇÃO (util quando resultSet de retorno vem com recordset ou recordsets)
const dbCon = require('@serverRoot/helpers/db');
const paginator = require('@serverRoot/helpers/paginator');

const query = {
	formato: 1,
	dados: {
		input: [
			['nome', '%jo%']
		],
		executar: 'SELECT ID_USUARIO, NOME, SENHA, ATIVO FROM USUARIO (NOLOCK) WHERE NOME LIKE(@nome);'
	}
};

// Executa query ou queries
const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);
const pagedResultSet = paginator.setPage(req, resultSet, resultSet.recordset, resultSet.rowsAffected, true); // Paginador

return pagedResultSet;
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com PAGINAÇÃO e ORDENAÇÃO
const dbCon = require('@serverRoot/helpers/db');
const paginator = require('@serverRoot/helpers/paginator');

const query = {
	formato: 1,
	dados: {
		input: [
			['nome', '%jo%']
		],
		executar: 'SELECT ID_USUARIO, NOME, SENHA, ATIVO FROM USUARIO (NOLOCK) WHERE NOME LIKE(@nome);'
	}
};

// Executa query ou queries
const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);

resultSet.recordset = paginator.setSort(req, resultSet.recordset, true); // Ordenador
const pagedResultSet = paginator.setPage(req, resultSet, resultSet.recordset, resultSet.rowsAffected); // Paginador

return pagedResultSet;

/*
	* Apenas UM toCamelCase é necessário em todas as chamadas
		=> parâmetro toCamelCase existe nos métodos setSort, setPage e setResult da lib paginator

	* se toCamelCase = true no setSort (ou antes da chamada setSort):
		=> utilizar camelCase exato (case sensitive) para identificar as chaves de sort no Json
		=> é o caso do exemplo

	* se toCamelCase = false no setSort:
		=> utilizar nome da coluna exato no banco de dados (case sensitive) para identificar as chaves de sort no Json
*/

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com SEARCHER
const searcher = require('@serverRoot/helpers/searcher');

const replaceQuery = '{{REPLACE}}';
const baseQuery = `
	SELECT
		a.ID_USUARIO
		,a.ID_TIPO
		,a.NOME
		,a.EMAIL
		,a.SENHA
		,a.SALT
		,a.ATIVO
		,b.TIPO
	FROM
		USUARIO a (NOLOCK)
		INNER JOIN TIPO b (NOLOCK)
			on (a.ID_TIPO = b.ID_TIPO)
	WHERE
		a.NOME LIKE ('%jo%')
		${replaceQuery};
`;

// Searcher: searchFields deve ser uma array (colunas inválidas para pesquisa geram erro)
const resultSet = await searcher.setSearch(
	req,
	baseQuery,
	replaceQuery
);

return resultSet;


/* * const replaceQuery = '{{REPLACE}}' não precisa ser alterada, serve apena como identificador * */

/*
	* REPLACE (via http GET) é case insensitive e pode ser enviado em:
		=> SNAKE_CASE (padrão do banco deve ser SNAKE_CASE)
		=> camelCase
*/

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com SEARCHER (json de retorno em camelCase)
const paginator = require('@serverRoot/helpers/paginator');
const searcher = require('@serverRoot/helpers/searcher');

const replaceQuery = '{{REPLACE}}';
const baseQuery = `
	SELECT
		a.ID_USUARIO
		,a.ID_TIPO
		,a.NOME
		,a.EMAIL
		,a.SENHA
		,a.SALT
		,a.ATIVO
		,b.TIPO
	FROM
		USUARIO a (NOLOCK)
		INNER JOIN TIPO b (NOLOCK)
			on (a.ID_TIPO = b.ID_TIPO)
	WHERE
		a.NOME LIKE ('%jo%')
		${replaceQuery};
`;

// Searcher: searchFields deve ser uma array (colunas inválidas para pesquisa geram erro)
const resultSet = await searcher.setSearch(
	req,
	baseQuery,
	replaceQuery
);

resultSet.recordset = paginator.keysToCamelCase(resultSet.recordset); // Chaves para camelCase

return resultSet;


/* * const replaceQuery = '{{REPLACE}}' não precisa ser alterada, serve apena como identificador * */

/*
	* REPLACE (via http GET) é case insensitive e pode ser enviado em:
		=> SNAKE_CASE (padrão do banco deve ser SNAKE_CASE)
		=> camelCase
*/

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Chamada com SEARCHER, PAGINACAO e ORDENAÇÃO
const paginator = require('@serverRoot/helpers/paginator');
const searcher = require('@serverRoot/helpers/searcher');

const replaceQuery = '{{REPLACE}}';
const baseQuery = `
	SELECT
		a.ID_USUARIO
		,a.ID_TIPO
		,a.NOME
		,a.EMAIL
		,a.SENHA
		,a.SALT
		,a.ATIVO
		,b.TIPO
	FROM
		USUARIO a (NOLOCK)
		INNER JOIN TIPO b (NOLOCK)
			on (a.ID_TIPO = b.ID_TIPO)
	${replaceQuery};
`;

// Searcher: searchFields deve ser uma array (colunas inválidas para pesquisa geram erro)
const resultSet = await searcher.setSearch(
	req,
	baseQuery,
	replaceQuery
);

resultSet.recordset = paginator.setSort(req, resultSet.recordset, true); // Ordenador
const pagedResultSet = paginator.setPage(req, resultSet, resultSet.recordset, resultSet.rowsAffected); // Paginador

return pagedResultSet;


/* * const replaceQuery = '{{REPLACE}}' não precisa ser alterada, serve apena como identificador * */

/*
	* REPLACE (via http GET) é case insensitive e pode ser enviado em:
		=> SNAKE_CASE (padrão do banco deve ser SNAKE_CASE)
		=> camelCase
*/

/*
	* Apenas UM toCamelCase é necessário em todas as chamadas
		=> parâmetro toCamelCase existe nos métodos setSort, setPage e setResult da lib paginator

	* se toCamelCase = true no setSort (ou antes da chamada setSort):
		=> utilizar camelCase exato (case sensitive) para identificar as chaves de sort no Json
		=> é o caso do exemplo

	* se toCamelCase = false no setSort:
		=> utilizar nome da coluna exato no banco de dados (case sensitive) para identificar as chaves de sort no Json
*/

// ---------------------------------------------------------------------------------------------------------
