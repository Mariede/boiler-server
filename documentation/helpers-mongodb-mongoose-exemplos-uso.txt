LIB db.js (MongoDB)
===================

Conexão e execução de comandos noSql em mongoDB

* É preciso configurar previamente os detalhes dos esquemas mongoose em /src/lib-com/mongoose-schemas.js *


// ---------------------------------------------------------------------------------------------------------
// Recordsets - padrão de retorno com o método dbCon.mongoDB.noSqlFormattedResult:

{
	"recordset": [],
	"rowsAffected": [
		0
	]
}

// ---------------------------------------------------------------------------------------------------------
// Parâmetros de entrada (exemplos)

// Insert / Select
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');

await typesModel.deleteMany(
	{
		type: /^[ ]*Alpha/i
	}
);

await typesModel.create(
	[
		{
			type: 'Alpha'
		}
	]
);

return dbCon.mongoDB.noSqlFormattedResult(await typesModel.find());

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Insert / Select (com integridade referencial)
// Retorno com populate
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');
const usersModel = await dbCon.mongoDB.noSqlExecute('users');

await usersModel.deleteMany(
	{
		name: /^[ ]*joaquim/i
	}
);

await usersModel.create(
	[
		{
			name: 'Joaquim Silva',
			email: '   joaquim.silva@email.com   ',
			age: 29,
			pass: '$#$#$565611',
			salt: '12345111',
			active: true,
			type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types')
		}
	]
);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find().populate({ path: 'type', model: typesModel }));

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Update / Select
// Retorno sem populate
const dbCon = require('@serverRoot/helpers/db');

const usersModel = await dbCon.mongoDB.noSqlExecute('users');

await usersModel.findOneAndUpdate(
	{
		name: /^[ ]*joaquim/i
	},
	{
		name: 'Joaquim Santos'
	}
);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find());

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Update / Select
// Retorno com populate
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');
const usersModel = await dbCon.mongoDB.noSqlExecute('users');

await usersModel.findOneAndUpdate(
	{
		name: /^[ ]*joaquim/i
	},
	{
		name: 'Joaquim Santos Silva'
	}
);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find().populate({ path: 'type', model: typesModel }));

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Delete / Select
// Retorno sem populate
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');
const usersModel = await dbCon.mongoDB.noSqlExecute('users');

await typesModel.deleteMany(
	{
		type: /^[ ]*Alpha/i
	}
);

await usersModel.deleteMany(
	{
		name: /^[ ]*joaquim/i
	}
);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find());

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
/*
   Transações - MongoDB precisa estar configurado como "replica set server" e não como "standalone server"

   String de conexâo:
   - ?replicaSet=replicaset na string de conexão pode ser necessário
   - ?retryWrites=true&w=majority para performance quando possível

   * Conexão com Atlas Free usa "authSource": "admin"
*/
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');
const usersModel = await dbCon.mongoDB.noSqlExecute('users');
const session = await dbCon.mongoDB.noSqlTransactionStart();

await typesModel.deleteMany(
	{
		type: /^[ ]*Alpha/i
	}
).session(session);

await typesModel.create(
	[
		{
			type: 'Alpha'
		}
	],
	{
		session: session
	}
);

await usersModel.deleteMany(
	{
		name: /^[ ]*joaquim/i
	}
).session(session);

await usersModel.create(
	[
		{
			name: 'Joaquim Silva',
			email: '   joaquim.silva@email.com   ',
			age: 29,
			pass: '$#$#$565611',
			salt: '12345111',
			active: true,
			type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types', session)
		}
	],
	{
		session: session
	}
);

await usersModel.findOneAndUpdate(
	{
		name: /^[ ]*joaquim/i
	},
	{
		name: 'Joaquim Santos Silva'
	}
).session(session);

await dbCon.mongoDB.noSqlTransactionCommit(session);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find().populate({ path: 'type', model: typesModel }));

// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// Análogo ao de cima, sem transações
const dbCon = require('@serverRoot/helpers/db');

const typesModel = await dbCon.mongoDB.noSqlExecute('types');
const usersModel = await dbCon.mongoDB.noSqlExecute('users');

await typesModel.deleteMany(
	{
		type: /^[ ]*Alpha/i
	}
);

await typesModel.create(
	[
		{
			type: 'Alpha'
		}
	]
);

await usersModel.deleteMany(
	{
		name: /^[ ]*joaquim/i
	}
);

await usersModel.create(
	[
		{
			name: 'Joaquim Silva',
			email: '   joaquim.silva@email.com   ',
			age: 29,
			pass: '$#$#$565611',
			salt: '12345111',
			active: true,
			type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types')
		}
	]
);

await usersModel.findOneAndUpdate(
	{
		name: /^[ ]*joaquim/i
	},
	{
		name: 'Joaquim Santos Silva'
	}
);

return dbCon.mongoDB.noSqlFormattedResult(await usersModel.find().populate({ path: 'type', model: typesModel }));

// ---------------------------------------------------------------------------------------------------------
