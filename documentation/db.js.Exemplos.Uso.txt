LIB db.js + paginator.js
------------------------

Conexao e execucao de queries no MS SQL Server atraves do pacote mssql

=> exemplos de parâmetros JSON de entrada para queries:

---------------------------------------------------------------------------------------------------------
//Estrutura basica queries (parametros de entrada)

query = {
	formato: 1,			// 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['ID', 'int', 1],
			['NOME', 'varchar(200)', '%Nome Exemplo 1%']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: `
			SELECT * FROM TABELA T (NOLOCK) WHERE T.ID_TABELA=@ID OR T.NOME LIKE(@NOME);
			SET @QTD_RET = SCOPE_IDENTITY();
		`
	}
}

query = {
	formato: 2,			// 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['ID', 'int', 1],
			['NOME', 'varchar(200)', 'Nome Exemplo 2']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// parametros de entrada (exemplos)

let query1 = {
	formato: 1, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['NOME', 'varchar(200)', 'Joaquim Santos'],
			['SENHA', 'varchar(20)', 'SENH@TESTE123'],
			['ATIVO', 'bit', 1],
			['NOMECHECK', 'varchar(200)', '%Joa%']
		],
		output: [
			['INSERTED_ID', 'int']
		],
		executar: `
			SET NOCOUNT OFF;
			DECLARE
				@INCR int; -- variavel interna
			SET
				@INCR = (
					SELECT TOP 1
						ID_USUARIO
					FROM
						USUARIO U (NOLOCK)
					WHERE
						U.NOME LIKE(@NOMECHECK) -- variavel input externa
					ORDER BY
						ID_USUARIO DESC
			);
			INSERT INTO USUARIO (
				NOME
				,SENHA
				,ATIVO
			) VALUES (
				@NOME + ' ' + CAST(@INCR AS varchar) -- variavel input externa + interna
				,@SENHA -- variavel input externa
				,@ATIVO -- variavel input externa
			);
			SET
				@INSERTED_ID = SCOPE_IDENTITY(); -- variavel output
			SELECT TOP 2
				NOME
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@NOMECHECK) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
			SELECT TOP 3
				*
			FROM
				USUARIO U (NOLOCK)
			WHERE
				U.NOME LIKE(@NOMECHECK) -- variavel input externa
			ORDER BY
				ID_USUARIO DESC;
		`
	}
},
query2 = {
	formato: 2, // 1: Query String, 2: Stored Procedure
	dados: {
		input: [
			['ID_USUARIO', 'int', 1],
			['NOME', 'varchar(200)', 'joa']
		],
		output: [
			['QTD_RET', 'int']
		],
		executar: 'USUARIO_CONSULTAR'
	}
};
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamadas nos metodos

// Execute (promise / await)
dbCon.sqlOpenCon()
.then(
	async transaction => {
		try {
			let result1 = await dbCon.sqlExecute(transaction, query1);
			//	result1 = await dbCon.sqlExecute(transaction, query2);
			await dbCon.sqlCloseCon(transaction);
			resolve(result1);
		} catch(err) {
			reject(err);
		}
	}
)
.catch(
	err => {
		reject(err);
	}
);


// Execute (apenas await)
try {
	let transaction = await dbCon.sqlOpenCon(),
		result1 = await dbCon.sqlExecute(transaction, query1);
	//	result1 = await dbCon.sqlExecute(transaction, query2);
	await dbCon.sqlCloseCon(transaction);
	return result1;
} catch(err) {
	throw new Error(err);
}


// ou com o metodo agrupador ExecuteAll (apenas await)
try {
	let result1 = await dbCon.sqlExecuteAll(query1);
	// let result1 = await dbCon.sqlExecuteAll(query2);
	return result1;
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamada com paginacao

try {
	const paginator = require('@serverRoot/helpers/paginator');

	let result1 = await dbCon.sqlExecuteAll(query1);
	let pResult = await paginator.setPage(result1.recordsets[0], result1.rowsAffected[0], 2, 17); // paginado: pagina 2 / 17 itens por pagina

	return pResult; // retorno => pageDetails, pageData, rowsAffected
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
// Chamada com paginacao e sorter (ordenado)

try {
	const paginator = require('@serverRoot/helpers/paginator');

	let result1 = await dbCon.sqlExecuteAll(query1);
	await paginator.setSorter(result1.recordsets[0], ['SORTER2', 'SORTER1'], 'ASC'); // sorter atua no proprio conjunto de dados, referenciado. 'ASC' pode ser omitido (default)
	let pResult = await paginator.setPage(result1.recordsets[0], result1.rowsAffected[0], 2, 17); // paginado: pagina 2 / 17 itens por pagina

	return pResult; // retorno => pageDetails, pageData, rowsAffected
} catch(err) {
	throw new Error(err);
}
---------------------------------------------------------------------------------------------------------
