// ---------------------------------------------------------------------------------------------------------
// usuario.consultarTodos (Exemplo de codificação no boiler)

const dbCon = require('@serverRoot/helpers/db');
const paginator = require('@serverRoot/helpers/paginator');

const consultarTodos = async (req, res) => {
	const query = {
		formato: 1,
		dados: {
			executar: `
				SELECT
					A.ID_USUARIO
					,A.NOME
					,A.EMAIL
					,A.SENHA
					,A.SALT
					,A.ATIVO
					,A.ID_EMPRESA [EMPRESA.ID]
					,B.EMPRESA [EMPRESA.NOME]
				FROM
					nodetest.USUARIO A (NOLOCK)
					INNER JOIN nodetest.EMPRESA B (NOLOCK)
						ON (A.ID_EMPRESA = B.ID_EMPRESA);
			`
		}
	};

	const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);

	// Ordenador
	resultSet.recordset = paginator.setSort(req, resultSet.recordset);

	// Paginador
	const pagedResultSet = paginator.setPage(req, resultSet, resultSet.recordset, resultSet.rowsAffected);

	// Chaves para camelCase
	pagedResultSet.recordset = paginator.keysToCamelCase(pagedResultSet.recordset);

	return pagedResultSet;
};
// ---------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------
// usuario.consultar (Exemplo de codificação no boiler)

const dbCon = require('@serverRoot/helpers/db');
const errWrapper = require('@serverRoot/helpers/err-wrapper');
const paginator = require('@serverRoot/helpers/paginator');
const validator = require('@serverRoot/helpers/validator');

const consultar = async (req, res) => {
	// Parametros de entrada
	const idUsuario = req.params.id;

	// Validacoes entrada
	if (!validator.isInteger(idUsuario, false)) {
		errWrapper.throwThis('AUTH', 400, 'ID do usuário deve ser numérico...');
	}

	const query = {
		formato: 1,
		dados: {
			input: [
				['idUsuario', 'int', idUsuario]
			],
			executar: `
				SELECT
					A.ID_USUARIO
					,A.NOME
					,A.EMAIL
					,A.SENHA
					,A.SALT
					,A.ATIVO
					,A.ID_EMPRESA [EMPRESA.ID]
					,B.EMPRESA [EMPRESA.NOME]
				FROM
					nodetest.USUARIO A (NOLOCK)
					INNER JOIN nodetest.EMPRESA B (NOLOCK)
						ON (A.ID_EMPRESA = B.ID_EMPRESA)
				WHERE
					A.ID_USUARIO = @idUsuario;
			`
		}
	};

	const resultSet = await dbCon.msSqlServer.sqlExecuteAll(query);

	// Chaves para camelCase
	resultSet.recordset = paginator.keysToCamelCase(resultSet.recordset);

	return resultSet;
};
// ---------------------------------------------------------------------------------------------------------
