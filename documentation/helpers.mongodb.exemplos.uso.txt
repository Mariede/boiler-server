LIB db.js (MongoDB)
===================

Conexão e execução de comandos noSql em mongoDB

* É preciso configurar previamente os detalhes dos esquemas mongoose em /src/models/mongooseSchemas.js *


// ---------------------------------------------------------------------------------------------------------
// Parâmetros de entrada (exemplos)

// Insert / Select
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types');

	// await typesModel.deleteMany({
	// 	type: /^[ ]*Alpha/i
	// });

	await typesModel.create(
		[
			{
				type: 'Alpha'
			}
		]
	);

	return typesModel.find();
} catch(err) {
	throw Error(err);
}

// Insert / Select (com integridade referencial)
// Retorno com populate
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types'),
		usersModel = await dbCon.mongoDB.noSqlExecute('users');

	// await usersModel.deleteMany({
	// 	name: /^[ ]*joaquim/i
	// });

	await usersModel.create(
		[
			{
				name: 'Joaquim Silva',
				email: '   joaquim.silva@email.com   ',
				age: 29,
				pass: '$#$#$565611',
				salt: '12345111',
				active: true,
				type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types')
			}
		]
	);

	return usersModel.find().populate({ path: 'type', model: typesModel });
} catch(err) {
	throw Error(err);
}

// Update / Select
// Retorno sem populate
const dbCon = require('@serverRoot/helpers/db');

try {
	let usersModel = await dbCon.mongoDB.noSqlExecute('users');

	await usersModel.findOneAndUpdate(
		{
			name: /^[ ]*joaquim/i
		},
		{
			name: 'Joaquim Santos'
		}
	);

	return usersModel.find();
} catch(err) {
	throw Error(err);
}

// Update / Select
// Retorno com populate
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types'),
		usersModel = await dbCon.mongoDB.noSqlExecute('users');

	await usersModel.findOneAndUpdate(
		{
			name: /^[ ]*joaquim/i
		},
		{
			name: 'Joaquim Santos Silva'
		}
	);

	return usersModel.find().populate({ path: 'type', model: typesModel });
} catch(err) {
	throw Error(err);
}

// Delete / Select
// Retorno sem populate
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types'),
		usersModel = await dbCon.mongoDB.noSqlExecute('users');

	await typesModel.deleteMany({
		type: /^[ ]*Alpha/i
	});

	await usersModel.deleteMany({
		name: /^[ ]*joaquim/i
	});

	return usersModel.find();
} catch(err) {
	throw Error(err);
}

// Transações - MongoDB precisa estar configurado como "replica set server" e não como "standalone server"
// ?replicaSet=replicaset na string de conexão
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types'),
		usersModel = await dbCon.mongoDB.noSqlExecute('users'),
		session = await dbCon.mongoDB.noSqlTransactionStart();

	await typesModel.deleteMany({
		type: /^[ ]*Alpha/i
	}).session(session);

	await typesModel.create(
		[
			{
				type: 'Alpha'
			}
		],
		{
			session: session
		}
	);

	await usersModel.deleteMany({
		name: /^[ ]*joaquim/i
	}).session(session);

	await usersModel.create(
		[
			{
				name: 'Joaquim Silva',
				email: '   joaquim.silva@email.com   ',
				age: 29,
				pass: '$#$#$565611',
				salt: '12345111',
				active: true,
				type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types', session)
			}
		],
		{
			session: session
		}
	);

	await usersModel.findOneAndUpdate(
		{
			name: /^[ ]*joaquim/i
		},
		{
			name: 'Joaquim Santos Silva'
		}
	).session(session);

	await dbCon.mongoDB.noSqlTransactionCommit(session);

	return usersModel.find().populate({ path: 'type', model: typesModel });
} catch(err) {
	throw Error(err);
}

// Análogo ao de cima, sem transações
const dbCon = require('@serverRoot/helpers/db');

try {
	let typesModel = await dbCon.mongoDB.noSqlExecute('types'),
		usersModel = await dbCon.mongoDB.noSqlExecute('users');

	await typesModel.deleteMany({
		type: /^[ ]*Alpha/i
	});

	await typesModel.create(
		[
			{
				type: 'Alpha'
			}
		]
	);

	await usersModel.deleteMany({
		name: /^[ ]*joaquim/i
	});

	await usersModel.create(
		[
			{
				name: 'Joaquim Silva',
				email: '   joaquim.silva@email.com   ',
				age: 29,
				pass: '$#$#$565611',
				salt: '12345111',
				active: true,
				type: await dbCon.mongoDB.noSqlGetIds({ type: 'Alpha' }, 'types')
			}
		]
	);

	await usersModel.findOneAndUpdate(
		{
			name: /^[ ]*joaquim/i
		},
		{
			name: 'Joaquim Santos Silva'
		}
	);

	return usersModel.find().populate({ path: 'type', model: typesModel });
} catch(err) {
	throw Error(err);
}
// ---------------------------------------------------------------------------------------------------------
