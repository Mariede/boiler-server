LIB email.js + uploader.js
==========================

Envio de e-mails com anexos, e-mails com templates din√¢micos


// ---------------------------------------------------------------------------------------------------------
// Exemplo de uso

const ejs = require('ejs');
const email = require('@serverRoot/helpers/email');
const uploader = require('@serverRoot/helpers/uploader');

const mailTemplate = `${__serverRoot}/views/server-side/pages/_mail-templates/template-1.ejs`;
const dataTemplate = await ejs.renderFile(mailTemplate, { tableHeader: 'TABLE HEADER!!' }); // Template dinamico
const fieldNames = 'files1, files2'; // Nome do campo html que informa a localizacao dos arquivos de upload no form (se mais de um campo, separar por virgula)
const filePath = 'server/files/path/'; // Caminho onde serao salvos os arquivos de upload no servidor (valido se storageToDisk for true)
const uploaderResults = await uploader.push(req, res, fieldNames, filePath, 0, true);
const attachments = email.getAttachments(uploaderResults.files);

return await email.sendEmail (
	['testefrom@server.com', 'From Name'],
	[
		['testeto1@server.com', 'To 1'],
		['testeto2@server.com'],
		['testeto3@server.com', 'To 3'],
		['testeto4@server.com', 'To 4'],
		['testeto5@server.com'],
		['testeto6@server.com']
	],
	[
		['testecc1@server.com', 'Cc 1'],
		['testecc2@server.com'],
		['testecc3@server.com']
	],
	[
		['testebcc1@server.com', 'Bcc 1']
	],
	'teste de envio - subject',
	dataTemplate,
	attachments,
	{ to: 1, cc: 1, bcc: 1 },
	true,
	true
);

/* * utilizar verbo POST * */
// ---------------------------------------------------------------------------------------------------------
